---
- name: Check if Apache is installed
  ansible.builtin.command: systemctl is-active apache2 || systemctl is-active httpd
  register: apache_status
  ignore_errors: true
  changed_when: false

- name: Check if Nginx is installed
  ansible.builtin.command: systemctl is-active nginx
  register: nginx_status
  ignore_errors: true
  changed_when: false

- name: Set web server facts
  ansible.builtin.set_fact:
    has_apache: "{{ apache_status.rc == 0 }}"
    has_nginx: "{{ nginx_status.rc == 0 }}"

- name: Install Apache if neither Apache nor Nginx is installed
  ansible.builtin.package:
    name: "{{ 'apache2' if ansible_os_family == 'Debian' else 'httpd' }}"
    state: present
  when: not has_apache and not has_nginx

- name: Install Nginx if neither Apache nor Nginx is installed
  ansible.builtin.package:
    name: nginx
    state: present
  when: not has_apache and not has_nginx

- name: Install Certbot and Apache plugin (Debian)
  ansible.builtin.apt:
    name:
      - certbot
      - python3-certbot-apache
    state: present
    update_cache: true
  when: ansible_os_family == "Debian" and (has_apache or (not has_apache and not has_nginx))

- name: Install Certbot and Apache plugin (RedHat)
  ansible.builtin.dnf:
    name:
      - certbot
      - python3-certbot-apache
    state: present
  when: ansible_os_family == "RedHat" and (has_apache or (not has_apache and not has_nginx))

- name: Enable Apache modules (mod_proxy, mod_proxy_http, mod_ssl)
  ansible.builtin.command: /usr/sbin/a2enmod {{ item }}
  loop:
    - proxy
    - proxy_http
    - ssl
  when: ansible_os_family == "Debian" and (has_apache or (not has_apache and not has_nginx))
  changed_when: true
  notify: Restart Apache

- name: Ensure webroot directory for Certbot
  ansible.builtin.file:
    path: /var/www/html/osticket/.well-known/acme-challenge
    state: directory
    owner: www-data
    group: www-data
    mode: '0755'
  become: true
  when: has_apache

- name: Copy temporary Apache config for ACME challenge
  ansible.builtin.template:
    src: osticket-acme.conf.j2
    dest: /etc/apache2/sites-available/osticket-acme.conf
    owner: root
    group: root
    mode: '0644'
  become: true
  when: has_apache
  changed_when: true

- name: Enable temporary Apache site for ACME challenge
  ansible.builtin.command: /usr/sbin/a2ensite osticket-acme.conf
  become: true
  when: has_apache
  changed_when: true

- name: Reload Apache to apply ACME config
  ansible.builtin.service:
    name: apache2
    state: reloaded
  become: true
  when: has_apache

- name: Check if LetsEncrypt certificate exists for domain
  ansible.builtin.stat:
    path: /etc/letsencrypt/live/{{ domain_name }}/fullchain.pem
  register: cert_check
  when: has_apache

- name: Run Certbot for SSL certificate (Apache)
  ansible.builtin.command:
    cmd: certbot certonly --webroot -w /var/www/html/osticket -d {{ domain_name }} --non-interactive --agree-tos --email admin@{{ domain_name }}
    creates: /etc/letsencrypt/live/{{ domain_name }}/fullchain.pem
  become: true
  when: has_apache and not cert_check.stat.exists
  changed_when: false

- name: Disable temporary Apache site for ACME challenge
  ansible.builtin.command: /usr/sbin/a2dissite osticket-acme.conf
  become: true
  when: has_apache
  changed_when: true

- name: Remove temporary Apache config for ACME challenge
  ansible.builtin.file:
    path: /etc/apache2/sites-available/osticket-acme.conf
    state: absent
  become: true
  when: has_apache
  changed_when: true

- name: Reload Apache to clean up ACME config
  ansible.builtin.service:
    name: apache2
    state: reloaded
  become: true
  when: has_apache

- name: Configure Apache for osTicket (HTTP and HTTPS)
  ansible.builtin.template:
    src: osticket.conf.j2
    dest: "{{ '/etc/apache2/sites-available/osticket.conf' if ansible_os_family == 'Debian' else '/etc/httpd/conf.d/osticket.conf' }}"
    owner: root
    group: root
    mode: '0644'
  when: has_apache or (not has_apache and not has_nginx)
  notify: Restart Apache

- name: Enable Apache site (Debian)
  ansible.builtin.command: /usr/sbin/a2ensite osticket.conf
  when: ansible_os_family == "Debian" and (has_apache or (not has_apache and not has_nginx))
  changed_when: true
  notify: Restart Apache

- name: Configure Nginx for osTicket (if Nginx is present)
  ansible.builtin.template:
    src: nginx.conf.j2
    dest: /etc/nginx/conf.d/osticket.conf
    owner: root
    group: root
    mode: '0644'
  when: has_nginx
  notify: Restart Nginx

- name: Create osTicket data directory
  ansible.builtin.file:
    path: /var/lib/osticket
    state: directory
    owner: "{{ osticket_uid }}"
    group: "{{ osticket_gid }}"
    mode: '0750'
    recurse: true
  become: true

- name: Ensure osTicket subdirectories exist
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: "{{ osticket_uid }}"
    group: "{{ osticket_gid }}"
    mode: '0750'
  loop:
    - /var/lib/osticket/osticket
    - /var/lib/osticket/osticket/include
  become: true

- name: Download French language pack
  ansible.builtin.get_url:
    url: http://osticket.com/sites/default/files/download/lang/fr.phar
    dest: /var/lib/osticket/osticket/include/i18n/fr.phar
    mode: '0644'
  become: true

- name: Copy osTicket configuration file
  ansible.builtin.template:
    src: ost-config.php.j2
    dest: /var/lib/osticket/osticket/include/ost-config.php
    owner: "{{ osticket_uid }}"
    group: "{{ osticket_gid }}"
    mode: '0640'
  notify: Restart osTicket

- name: Copy Docker Compose file
  ansible.builtin.template:
    src: docker-compose.yml.j2
    dest: /var/lib/osticket/docker-compose.yml
    owner: "{{ osticket_uid }}"
    group: "{{ osticket_gid }}"
    mode: '0644'

- name: Deploy osTicket with Docker Compose
  community.docker.docker_compose:
    project_src: /var/lib/osticket
    state: present
    build: false

- name: Remove osTicket setup directory
  ansible.builtin.file:
    path: /var/lib/osticket/osticket/setup
    state: absent
  become: true
