---
- name: Check if Apache is installed
  ansible.builtin.command: systemctl is-active apache2 || systemctl is-active httpd
  register: apache_status
  ignore_errors: true
  changed_when: false
- name: Check if Nginx is installed
  ansible.builtin.command: systemctl is-active nginx
  register: nginx_status
  ignore_errors: true
  changed_when: false
- name: Set web server facts
  ansible.builtin.set_fact:
    has_apache: "{{ apache_status.rc == 0 }}"
    has_nginx: "{{ nginx_status.rc == 0 }}"
- name: Install Apache if neither Apache nor Nginx is installed
  ansible.builtin.package:
    name: "{{ 'apache2' if ansible_os_family == 'Debian' else 'httpd' }}"
    state: present
  when: not has_apache and not has_nginx
- name: Install Nginx if neither Apache nor Nginx is installed
  ansible.builtin.package:
    name: nginx
    state: present
  when: not has_apache and not has_nginx
- name: Install Certbot and Apache plugin (Debian)
  ansible.builtin.apt:
    name:
      - certbot
      - python3-certbot-apache
    state: present
    update_cache: true
  when: ansible_os_family == "Debian" and (has_apache or (not has_apache and not has_nginx))
- name: Install Certbot and Apache plugin (RedHat)
  ansible.builtin.dnf:
    name:
      - certbot
      - python3-certbot-apache
    state: present
  when: ansible_os_family == "RedHat" and (has_apache or (not has_apache and not has_nginx))
- name: Enable Apache modules (mod_proxy, mod_proxy_http, mod_ssl)
  ansible.builtin.command: /usr/sbin/a2enmod {{ item }}
  loop:
    - proxy
    - proxy_http
    - ssl
  when: ansible_os_family == "Debian" and (has_apache or (not has_apache and not has_nginx))
  changed_when: true
  notify: Restart Apache
- name: Enable Apache SSL module (RedHat)
  ansible.builtin.lineinfile:
    path: /etc/httpd/conf/httpd.conf
    regexp: "^#LoadModule ssl_module"
    line: "LoadModule ssl_module modules/mod_ssl.so"
    state: present
  when: ansible_os_family == "RedHat" and (has_apache or (not has_apache and not has_nginx))
  notify: Restart Apache
- name: Configure Apache ports for HTTP and HTTPS (Debian)
  ansible.builtin.template:
    src: ports.conf.j2
    dest: /etc/apache2/ports.conf
    owner: root
    group: root
    mode: '0644'
  when: ansible_os_family == "Debian" and (has_apache or (not has_apache and not has_nginx))
  notify: Restart Apache
- name: Configure Apache ports for HTTP and HTTPS (RedHat)
  ansible.builtin.lineinfile:
    path: /etc/httpd/conf/httpd.conf
    line: "{{ item }}"
    state: present
  loop:
    - "Listen 80"
    - "Listen 443"
    - "Listen 8081"
    - "Listen 8083"
  when: ansible_os_family == "RedHat" and (has_apache or (not has_apache and not has_nginx))
  notify: Restart Apache
- name: Ensure webroot directory for Certbot
  ansible.builtin.file:
    path: /var/www/html/osticket/.well-known/acme-challenge
    state: directory
    owner: "{{ 'www-data' if ansible_os_family == 'Debian' else 'apache' }}"
    group: "{{ 'www-data' if ansible_os_family == 'Debian' else 'apache' }}"
    mode: '0755'
  become: true
  when: has_apache or (not has_apache and not has_nginx)
- name: Check if Apache site osticket.conf exists (Debian)
  ansible.builtin.stat:
    path: /etc/apache2/sites-enabled/osticket.conf
  register: site_check
  when: ansible_os_family == "Debian" and (has_apache or (not has_apache and not has_nginx))
- name: Disable Apache site (Debian) before ACME challenge
  ansible.builtin.command: /usr/sbin/a2dissite osticket.conf
  become: true
  when: ansible_os_family == "Debian" and (has_apache or (not has_apache and not has_nginx)) and site_check.stat.exists
  changed_when: true
  ignore_errors: true
- name: Reload Apache to disable osticket.conf
  ansible.builtin.service:
    name: "{{ 'apache2' if ansible_os_family == 'Debian' else 'httpd' }}"
    state: reloaded
  become: true
  when: has_apache or (not has_apache and not has_nginx)
- name: Copy temporary Apache config for ACME challenge
  ansible.builtin.template:
    src: osticket-acme.conf.j2
    dest: "{{ '/etc/apache2/sites-available/osticket-acme.conf' if ansible_os_family == 'Debian' else '/etc/httpd/conf.d/osticket-acme.conf' }}"
    owner: root
    group: root
    mode: '0644'
  become: true
  when: has_apache or (not has_apache and not has_nginx)
  changed_when: true
- name: Enable temporary Apache site for ACME challenge (Debian)
  ansible.builtin.command: /usr/sbin/a2ensite osticket-acme.conf
  become: true
  when: ansible_os_family == "Debian" and (has_apache or (not has_apache and not has_nginx))
  changed_when: true
- name: Reload Apache to apply ACME config
  ansible.builtin.service:
    name: "{{ 'apache2' if ansible_os_family == 'Debian' else 'httpd' }}"
    state: reloaded
  become: true
  when: has_apache or (not has_apache and not has_nginx)
- name: Check if LetsEncrypt certificate exists for domain
  ansible.builtin.stat:
    path: /etc/letsencrypt/live/{{ domain_name }}/fullchain.pem
  register: cert_check
  when: has_apache or (not has_apache and not has_nginx)
- name: Run Certbot for SSL certificate
  ansible.builtin.command:
    cmd: certbot certonly --webroot -w /var/www/html/osticket -d {{ domain_name }} --non-interactive --agree-tos --email admin@{{ domain_name }}
    creates: /etc/letsencrypt/live/{{ domain_name }}/fullchain.pem
  become: true
  when: (has_apache or (not has_apache and not has_nginx)) and not cert_check.stat.exists
  changed_when: false
- name: Disable temporary Apache site for ACME challenge (Debian)
  ansible.builtin.command: /usr/sbin/a2dissite osticket-acme.conf
  become: true
  when: ansible_os_family == "Debian" and (has_apache or (not has_apache and not has_nginx))
  changed_when: true
- name: Remove temporary Apache config for ACME challenge
  ansible.builtin.file:
    path: "{{ '/etc/apache2/sites-available/osticket-acme.conf' if ansible_os_family == 'Debian' else '/etc/httpd/conf.d/osticket-acme.conf' }}"
    state: absent
  become: true
  when: has_apache or (not has_apache and not has_nginx)
  changed_when: true
- name: Reload Apache to clean up ACME config
  ansible.builtin.service:
    name: "{{ 'apache2' if ansible_os_family == 'Debian' else 'httpd' }}"
    state: reloaded
  become: true
  when: has_apache or (not has_apache and not has_nginx)
- name: Configure Apache for osTicket (HTTP and HTTPS)
  ansible.builtin.template:
    src: osticket.conf.j2
    dest: "{{ '/etc/apache2/sites-available/osticket.conf' if ansible_os_family == 'Debian' else '/etc/httpd/conf.d/osticket.conf' }}"
    owner: root
    group: root
    mode: '0644'
  when: has_apache or (not has_apache and not has_nginx)
  notify: Restart Apache
- name: Enable Apache site (Debian)
  ansible.builtin.command: /usr/sbin/a2ensite osticket.conf
  when: ansible_os_family == "Debian" and (has_apache or (not has_apache and not has_nginx))
  changed_when: true
  notify: Restart Apache
- name: Configure Nginx for osTicket (if Nginx is present)
  ansible.builtin.template:
    src: nginx.conf.j2
    dest: /etc/nginx/conf.d/osticket.conf
    owner: root
    group: root
    mode: '0644'
  when: has_nginx
  notify: Restart Nginx
- name: Create osTicket data directory
  ansible.builtin.file:
    path: /var/lib/osticket
    state: directory
    owner: "{{ osticket_uid }}"
    group: "{{ osticket_gid }}"
    mode: '0750'
    recurse: true
  become: true
- name: Clear osTicket data directory
  ansible.builtin.file:
    path: /var/lib/osticket/osticket
    state: directory
    owner: "{{ osticket_uid }}"
    group: "{{ osticket_gid }}"
    mode: '0750'
  become: true
- name: Clear MySQL data directory
  ansible.builtin.file:
    path: /var/lib/osticket/mysql
    state: directory
    owner: "{{ osticket_uid }}"
    group: "{{ osticket_gid }}"
    mode: '0700'
  become: true
- name: Copy Docker Compose file
  ansible.builtin.template:
    src: docker-compose.yml.j2
    dest: /var/lib/osticket/docker-compose.yml
    owner: "{{ osticket_uid }}"
    group: "{{ osticket_gid }}"
    mode: '0644'
  become: true
- name: Deploy osTicket with Docker Compose
  community.docker.docker_compose_v2:
    project_src: /var/lib/osticket
    state: present
    build: never
  become: true
  register: docker_compose_result
- name: Wait for MySQL container to be ready
  ansible.builtin.wait_for:
    host: localhost
    port: "{{ db_port }}"
    state: started
    timeout: 120
  when: not docker_compose_result.failed | default(false)
- name: Ensure osTicket data directory exists
  ansible.builtin.file:
    path: /var/lib/osticket/osticket
    state: directory
    owner: "{{ osticket_uid }}"
    group: "{{ osticket_gid }}"
    mode: '0755'  # Changed to 0755 for broader write access
  become: true
- name: Ensure osTicket include directory exists
  ansible.builtin.file:
    path: /var/lib/osticket/osticket/include
    state: directory
    owner: "{{ osticket_uid }}"
    group: "{{ osticket_gid }}"
    mode: '0750'
  become: true
- name: Fix permissions on osTicket data directory
  ansible.builtin.file:
    path: /var/lib/osticket/osticket
    state: directory
    owner: "{{ osticket_uid }}"
    group: "{{ osticket_gid }}"
    mode: '0755'
    recurse: true
  become: true
- name: Check if osTicket container is running
  community.docker.docker_container_info:
    name: osticket
  register: osticket_info
  changed_when: false
  ignore_errors: true
- name: Force Git checkout in application container
  ansible.builtin.command:
    cmd: docker exec {{ app_name }} git checkout -f {{ git_branch }}
  become: true
  when: osticket_info.exists and osticket_info.container.State.Running
  ignore_errors: true
- name: Set Git tracking branch for application
  ansible.builtin.command:
    cmd: docker exec {{ app_name }} git branch --set-upstream-to=origin/{{ git_branch }} {{ git_branch }}
  become: true
  when: osticket_info.exists and osticket_info.container.State.Running
  ignore_errors: true
- name: Copy osTicket configuration file
  ansible.builtin.template:
    src: ost-config.php.j2
    dest: /var/lib/osticket/osticket/include/ost-config.php
    owner: "{{ osticket_uid }}"
    group: "{{ osticket_gid }}"
    mode: '0640'
  become: true
  when: osticket_info.exists and osticket_info.container.State.Running
  notify: Restart osTicket
- name: Remove unnecessary osTicket directories in container
  ansible.builtin.command:
    cmd: docker exec osticket rm -rf {{ item }}
  loop:
    - /var/www/src/public/include/laminas-mail/src/Transport
    - /var/www/src/public/include/laminas-mail/src/Storage/Folder
    - /var/www/src/public/include/laminas-mail/src/Storage/Message
    - /var/www/src/public/include/laminas-mail/src/Storage/Part/Exception
    - /var/www/src/public/include/laminas-mail/src/Storage/Part
    - /var/www/src/public/include/laminas-mail/src/Storage/Exception
    - /var/www/src/public/include/laminas-mail/src/Storage/Writable
    - /var/www/src/public/include/laminas-mail/src/Storage
    - /var/www/src/public/include/laminas-mail/src
    - /var/www/src/public/include/laminas-mail
    - /var/www/src/public/include/client/templates
    - /var/www/src/public/include/client
    - /var/www/src/public/include/cli/modules
    - /var/www/src/public/include/cli
    - /var/www/src/public/include
  become: true
  ignore_errors: true
  when: osticket_info.exists and osticket_info.container.State.Running

#- name: Remove osTicket setup directory
#  ansible.builtin.file:
#    path: /var/lib/osticket/osticket/setup
#    state: absent
#  become: true
#  when: osticket_info.exists and osticket_info.container.State.Running
